{"version":3,"file":"component---src-pages-ideologie-mdx-ec5bf3fee7bf336775d3.js","mappings":"kJAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,GAAI,OACHC,EAAAA,EAAAA,KAAsBP,EAAMQ,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBR,EAAYG,GAAI,KAAM,aAAc,KAAMK,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,kJAAmJ,KAAMI,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,kLAAmL,KAAMI,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,6GAA8G,KAAMI,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,aAAc,KAAMG,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,sJAAuJ,KAAMI,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,iKAAkK,KAAMI,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,cAAe,KAAMG,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,0LAA2L,KAAMI,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,oMAAuM,KAAMI,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,mOAAoO,KAAMI,EAAAA,cAAoBR,EAAYK,GAAI,KAAM,eAAgB,KAAMG,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,yLAA0L,KAAMI,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,+LAAgM,KAAMI,EAAAA,cAAoBR,EAAYI,EAAG,KAAM,mMAC1/E,CAKA,UAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOU,QAASC,GAAaT,OAAOC,OAAO,CAAC,GAAGI,EAAAA,EAAAA,KAAsBP,EAAMQ,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWX,EAAOS,EAAAA,cAAoBV,EAAmBC,IAAUD,EAAkBC,EAC9H,C,qECaA,MAAMY,EAAkB,CAAC,EAEnBC,EAAa,gBAAoBD,GAUhC,SAASE,EAAiBN,GAC/B,MAAMO,EAAoB,aAAiBF,GAG3C,OAAO,WACL,WAEE,MAA0B,mBAAfL,EACFA,EAAWO,GAGb,IAAIA,KAAsBP,EACnC,GACA,CAACO,EAAmBP,GAExB,C","sources":["webpack://volby-kscm.cz/./src/pages/ideologie.mdx","webpack://volby-kscm.cz/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"Ideologie\"), \"\\n\", React.createElement(_components.p, null, \"Komunismus je politická ideologie požadující společné vlastnictví a odmítající třídní rozdíly mezi lidmi. Její zastánci se nazývají komunisté.\"), \"\\n\", React.createElement(_components.p, null, \"Tato myšlenka je však čistě idealistická a v praxi se nikdy neosvědčila. Ve skutečnosti totiž popírá lidskou přirozenost a touhu jednotlivce stoupat v hierarchii společnosti.\"), \"\\n\", React.createElement(_components.p, null, \"Komunismus tedy v praxi nikdy dlouhodobě neexistoval, vždy měl tendenci sklouznout k represím a totalitě.\"), \"\\n\", React.createElement(_components.h2, null, \"Marxismus\"), \"\\n\", React.createElement(_components.p, null, \"Marxismus je ucelenou teorií přeměny reálných poměrů ve společnosti, především změnou vlastnických vztahů pomocí revolučně vedeného třídního boje.\"), \"\\n\", React.createElement(_components.p, null, \"Cílem je dovést proletariát k revoluci nastolující beztřídní společnost, osvobozujícího člověka od společenského útlaku a rozvíjející jeho schopnosti a síly.\"), \"\\n\", React.createElement(_components.h2, null, \"Leninismus\"), \"\\n\", React.createElement(_components.p, null, \"Jednostranným absolutizováním a zvulgarizováním původního marxismu, zejména názorů na třídní boj, vznikl leninismus (marxismus-leninismus), pojmenovaný po jeho tvůrci - V.I.Leninovi.\"), \"\\n\", React.createElement(_components.p, null, \"Ve svých filozofických a politických tezích Lenin dokazoval, že revoluce povede k přímé vládě dělníků a rolníků, načež stát se svým donucovacím aparátem \\\"odumře\\\" (vznik beztřídní společnosti).\"), \"\\n\", React.createElement(_components.p, null, \"Vzhledem k tomu, že revoluce musí být řízena předvojem proletariátu, čili komunistickou politickou stranou) se Leninova teorie přímé vlády záhy v praxi změnila v totalitní vládu jedné politické strany nad celou společností.\"), \"\\n\", React.createElement(_components.h2, null, \"Stalinismus\"), \"\\n\", React.createElement(_components.p, null, \"Termín “stalinismus” označuje politickou teorii a praxi, které se cele vztahují k osobnosti Josefa Vissarionoviče Stalina, vůdce ruského bolševismu po úmrtí Vladimíra Iljiče Lenina.\"), \"\\n\", React.createElement(_components.p, null, \"Základním rysem je představa, že vnitřní stability a vnější bezpečnosti lze dosáhnout drastickou industrializací. Této strategii byla přizpůsobena i přestavba (kolektivizace) zemědělství.\"), \"\\n\", React.createElement(_components.p, null, \"K uskutečnění svých cílů používal Stalin brutální násilí a masový teror. Celkový počet obětí na lidských životech se většinou odhaduje na 20 mil. osob, i když existují odhady podstatně vyšší.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('react').Component<{}, {}, unknown>} Component\n * @typedef {import('react').ReactNode} ReactNode\n */\n\n/**\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Readonly<MDXComponents>} currentComponents\n *   Current components from the context.\n * @returns {MDXComponents}\n *   Additional components.\n *\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {ReactNode | null | undefined} [children]\n *   Children (optional).\n * @property {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context (default: `false`).\n */\n\nimport React from 'react'\n\n/** @type {Readonly<MDXComponents>} */\nconst emptyComponents = {}\n\nconst MDXContext = React.createContext(emptyComponents)\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Readonly<MDXComponents> | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that creates them (optional).\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(\n    function () {\n      // Custom merge via a function prop\n      if (typeof components === 'function') {\n        return components(contextComponents)\n      }\n\n      return {...contextComponents, ...components}\n    },\n    [contextComponents, components]\n  )\n}\n\n/**\n * Provider for MDX context.\n *\n * @param {Readonly<Props>} properties\n *   Properties.\n * @returns {JSX.Element}\n *   Element.\n * @satisfies {Component}\n */\nexport function MDXProvider(properties) {\n  /** @type {Readonly<MDXComponents>} */\n  let allComponents\n\n  if (properties.disableParentContext) {\n    allComponents =\n      typeof properties.components === 'function'\n        ? properties.components(emptyComponents)\n        : properties.components || emptyComponents\n  } else {\n    allComponents = useMDXComponents(properties.components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    properties.children\n  )\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","h1","p","h2","_provideComponents","components","React","wrapper","MDXLayout","emptyComponents","MDXContext","useMDXComponents","contextComponents"],"sourceRoot":""}